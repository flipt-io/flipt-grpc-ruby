# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: analytics/analytics.proto

require 'google/protobuf'


descriptor_data = "\n\x19\x61nalytics/analytics.proto\x12\x0f\x66lipt.analytics\"\x84\x01\n\x1eGetFlagEvaluationsCountRequest\x12#\n\rnamespace_key\x18\x01 \x01(\tR\x0cnamespaceKey\x12\x19\n\x08\x66lag_key\x18\x02 \x01(\tR\x07\x66lagKey\x12\x12\n\x04\x66rom\x18\x03 \x01(\tR\x04\x66rom\x12\x0e\n\x02to\x18\x04 \x01(\tR\x02to\"Y\n\x1fGetFlagEvaluationsCountResponse\x12\x1e\n\ntimestamps\x18\x01 \x03(\tR\ntimestamps\x12\x16\n\x06values\x18\x02 \x03(\x02R\x06values2\x92\x01\n\x10\x41nalyticsService\x12~\n\x17GetFlagEvaluationsCount\x12/.flipt.analytics.GetFlagEvaluationsCountRequest\x1a\x30.flipt.analytics.GetFlagEvaluationsCountResponse\"\x00\x42\'Z%go.flipt.io/flipt/rpc/flipt/analyticsb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Flipt
  module Analytics
    GetFlagEvaluationsCountRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("flipt.analytics.GetFlagEvaluationsCountRequest").msgclass
    GetFlagEvaluationsCountResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("flipt.analytics.GetFlagEvaluationsCountResponse").msgclass
  end
end
